#!/bin/bash

source $HOME/.bash/git

setup-git-gitlab() {
  setup-git GitLab pleitzen@gitlab.com
}

rs() {
  bin/spring rspec "$@"
}

rrs() {
  rs --order "random:$RANDOM" "$@"
}

rs-loop() {
  while :; do
    rs "$@" || break
  done
}

rrs-loop() {
  while :; do
    rrs "$@" || break
  done
}

mr_failed_test() {
  local project_path=$(git remote get-url origin | perl -ne '/:(.*?)(?:\.git)?$/ and print $1')
  local mr_iid="$1"
  local branch=$(git rev-parse --abbrev-ref HEAD)

  if [ "$mr_iid" = "" -a "$branch" != "master" ]
  then
    local escpaed_project_path=${project_path//\//%2f}
    mr_iid=$(curl -sG --data-urlencode "source_branch=${branch}" "https://gitlab.com/api/v4/projects/$escpaed_project_path/merge_requests" | jq -j '.[0].iid')
  fi

  if [ "$mr_iid" = "" ]
  then
    echo "MR IID is required for '$branch'"
    return 1
  fi

  echo "# Fetching from https://gitlab.com/${project_path}/-/merge_requests/${mr_iid}/test_reports.json" >&2
  curl -s "https://gitlab.com/${project_path}/-/merge_requests/${mr_iid}/test_reports.json" | jq -r '.suites[]? | .new_failures[].file | sub("./"; "")' | uniq
}
